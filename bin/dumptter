#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'time'
require 'rubygems'
require 'yaml'
require 'highline'
require 'rubytter'
require 'oauth'
require 'active_record'
require 'sqlite3'
require 'json'

DUMPTTER_VERSION=3

DUMPTTER_DIR="#{ENV['HOME']}/.dumptter"
YAML_FILE="#{DUMPTTER_DIR}/config.yaml"
DB_FILE="#{DUMPTTER_DIR}/dumptter2.db"

errors_array = []

twitter_consumer_key=''
twitter_consumer_secret=''
twitter_token_key=''
twitter_token_secret=''

ActiveRecord::Base.establish_connection(
  :adapter => 'sqlite3',
  :database  => DB_FILE
)

def insert_tweets(tweets_array)
  tweets_array.sort! do |tweet1, tweet2|
    tweet1['id'] <=> tweet2['id']
  end

  if tweets_array.size > 0
    Tweet.transaction {
      tweets_array.each do |tweet|
        Tweet.create(
          :id => tweet['id'],
          :text => tweet['text'],
          :json => JSON.generate(tweet),
          :retweeted => tweet.has_key?('retweeted_status'),
          :posted_at => Time.parse(tweet['created_at']),
          :dumptter_version => DUMPTTER_VERSION
        )
      end
    }
  end
end

def check_errors(errors_array)
  if errors_array.size > 0
    errors_array.each do |error|
      STDERR.print "Error: #{error}\n"
    end
    exit
  end
end

if FileTest.exist?(DUMPTTER_DIR)
  if FileTest::directory?(DUMPTTER_DIR)
  else
    errors_array << "'#{DUMPTTER_DIR}/' is not a directory."
  end
else
  Dir.mkdir("#{DUMPTTER_DIR}")
end
check_errors(errors_array)

if FileTest.exist?(YAML_FILE)
  if FileTest::file?(YAML_FILE)
  else
    errors_array << "'#{YAML_FILE}' is not a file."
  end
else
  print "Please enter your twitter consumer information.\n"
  print "You can regist a new consumer application from here.\n"
  print "  http://dev.twitter.com/apps/new\n"
  print "    Application Name: dumptter\n"
  print "    Description: backup my tweets\n"
  print "    Application Website: http://github.com/river24/dumptter\n"
  print "    Application Type: Client\n"
  print "    Default Access type: Read-only\n"
  consumer_key = HighLine.new.ask('Consumer Key: ')
  consumer_secret = HighLine.new.ask('Consumer Secret: ')
  consumer = OAuth::Consumer.new(
    consumer_key,
    consumer_secret,
    :site => "https://api.twitter.com"
  )
  request_token = consumer.get_request_token
  print "Please access and authorize the request from dumptter.\n"
  print "  #{request_token.authorize_url}\n"
  oauth_verifier = HighLine.new.ask('Please enter the PIN: ')
  access_token = request_token.get_access_token(:oauth_verifier => "#{oauth_verifier}")
  yaml_io = File.open("#{YAML_FILE}",'w')
  yaml_io.puts "consumer_key: #{consumer_key}"
  yaml_io.puts "consumer_secret: #{consumer_secret}"
  yaml_io.puts "token_key: #{access_token.token}"
  yaml_io.puts "token_secret: #{access_token.secret}"
  yaml_io.close
end
check_errors(errors_array)

invalid_yaml = false
File.open(YAML_FILE) do |io|
  YAML.load_documents(io) do |y|
    if defined? y['consumer_key']
      tmp_consumer_key=y['consumer_key']
      twitter_consumer_key=tmp_consumer_key
    else
      invalid_yaml = true
    end
    if defined? y['consumer_secret']
      tmp_consumer_secret=y['consumer_secret']
      twitter_consumer_secret=tmp_consumer_secret
    else
      invalid_yaml = true
    end
    if defined? y['token_key']
      tmp_token_key=y['token_key']
      twitter_token_key=tmp_token_key
    else
      invalid_yaml = true
    end
    if defined? y['token_secret']
      tmp_token_secret=y['token_secret']
      twitter_token_secret=tmp_token_secret
    else
      invalid_yaml = true
    end
  end
end
if invalid_yaml
  errors_array << "'#{YAML_FILE}' is invalid."
elsif twitter_consumer_key == '' ||
      twitter_consumer_secret == '' ||
      twitter_token_key == '' || 
      twitter_token_secret == ''
  errors_array << "'#{YAML_FILE}' is invalid."
end
check_errors(errors_array)

if FileTest.exist?(DB_FILE)
  if !FileTest::file?(DB_FILE)
    errors_array << "'#{DB_FILE}' is not a file."
  end
end
check_errors(errors_array)

ActiveRecord::Migrator.migrate('db/migrate', ENV["VERSION"] ? ENV["VERSION"].to_i : nil)

class Tweet < ActiveRecord::Base
  self.primary_key = :id
end

mode = 'fetch'

if ARGV.size == 0
  mode = 'fetch'
elsif ARGV.size == 1
  if ARGV[0].to_s == 'fetch'
    mode = 'fetch'
  elsif ARGV[0].to_s == 'count'
    mode = 'count'
  elsif ARGV[0].to_s == 'recent'
    mode = 'recent'
    offset = 0
    limit = 10
  elsif ARGV[0].to_s == 'update'
    mode = 'update'
  else
    errors_array << "'#{ARGV[0]}' is invalid mode."
  end
elsif ARGV.size == 2
  if ARGV[0].to_s == 'recent'
    mode = 'recent'
    offset = ARGV[1].to_i
    limit = 10
  elsif ARGV[0].to_s == 'search'
    mode = 'search'
    QUERY = ARGV[1].to_s
  else
    errors_array << "'#{ARGV[0]}' is invalid mode."
  end
else
  errors_array << "'#{ARGV[0]}' is invalid mode."
end
check_errors(errors_array)

if mode == 'count'
  count = Tweet.count
  print "Count: #{count}\n"
elsif mode == 'recent'
  tweets_array = Tweet.order(id: :desc).limit(limit).offset(offset)
  tweets_array.each do |tweet|
    print "#{tweet.text}\n"
    print " - ID: #{tweet.id} @ #{tweet.posted_at}\n"
  end
elsif mode == 'search'
  tweets_array = Tweet.where('text LIKE ?', "%#{QUERY}%")
  tweets_array.each do |tweet|
    print "#{tweet.text}\n"
    print " - ID: #{tweet.id} @ #{tweet.posted_at}\n"
  end
else
  consumer = OAuth::Consumer.new(
    twitter_consumer_key,
    twitter_consumer_secret,
    :site => 'https://api.twitter.com'
  )

  token = OAuth::AccessToken.new(
    consumer,
    twitter_token_key,
    twitter_token_secret
  )

  rubytter = OAuthRubytter.new(token)

  if mode == 'fetch'
    tweets_array = []

    min_id = -1
    loop = true
    while loop do
      if min_id < 0
        timeline = rubytter.user_timeline(:count => 200)
      else
        timeline = rubytter.user_timeline(:count => 200, :max_id => min_id - 1)
      end
      if timeline.size == 0
        loop = false
      end
      timeline.each do |tweet|
        if min_id < 0
          min_id = tweet.id.to_i
        else
          if tweet.id.to_i < min_id
            min_id = tweet.id.to_i
          end
        end
        tmp_tweet = Tweet.where(:id => tweet.id.to_i).first
        if tmp_tweet.nil?
          tweets_array.push(JSON.parse(tweet.to_json))
        else
          loop = false
        end
      end
    end

    insert_tweets(tweets_array)

  elsif mode == 'update'
    old_tweet = Tweet.where('dumptter_version < ?', DUMPTTER_VERSION.to_i).order(id: :asc).limit(1).first
    if !old_tweet.nil?
      begin
        updated_tweet = rubytter.show(old_tweet.id)
        updated_tweet_json = JSON.parse(updated_tweet.to_json)
        old_tweet.update_attributes(
          {
            :json => JSON.generate(updated_tweet_json),
            :posted_at => Time.parse(updated_tweet_json['created_at']),
            :dumptter_version => DUMPTTER_VERSION
          }
        )
      rescue
        p "destroy tweet"
        # old_tweet.destroy
      end
    end
  end
end

