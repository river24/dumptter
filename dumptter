#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'time'
require 'rubygems'
require 'rubytter'
require 'oauth'
require 'active_record'
require 'sqlite3'
require 'highline'
require 'base64'

DUMPTTER_DIR="#{ENV['HOME']}/.dumptter"
YAML_FILE="#{DUMPTTER_DIR}/config.yaml"
DB_FILE="#{DUMPTTER_DIR}/dumptter.db"

errors = []

twitter_consumer_key=''
twitter_consumer_secret=''
twitter_token_key=''
twitter_token_secret=''

ActiveRecord::Base.establish_connection(
                                        :adapter => 'sqlite3',
                                        :database  => DB_FILE
                                        )

class InitialSchema < ActiveRecord::Migration
  def self.up
    create_table :statuses do |t|
      t.column :status_id, :integer, :null => false
      t.column :status_text, :text
      t.column :user_id, :integer, :null => false
      t.column :user_screen_name, :text
      t.column :status_reply, :boolean
      t.column :status_at, :timestamp
      t.column :created_at, :timestamp
      t.column :updated_at, :timestamp
    end
  end
  def self.down
    drop_table :statuses
  end
end

def check_errors(errors)
  if errors.size > 0
    errors.each{|error|
      print "Error: #{error}\n"
    }
    exit
  end
end

if FileTest.exist?(DUMPTTER_DIR)
  if FileTest::directory?(DUMPTTER_DIR)
  else
    errors << "'#{DUMPTTER_DIR}/' is not a directory."
  end
else
  Dir.mkdir("#{DUMPTTER_DIR}")
end
check_errors(errors)

if FileTest.exist?(YAML_FILE)
  if FileTest::file?(YAML_FILE)
  else
    errors << "'#{YAML_FILE}' is not a file."
  end
else
  print "Please enter your twitter consumer information.\n"
  print "You can regist a new consumer application from here.\n"
  print "  http://dev.twitter.com/apps/new\n"
  print "    Application Name: dumptter\n"
  print "    Description: backup my tweets\n"
  print "    Application Website: http://github.com/river24/dumptter\n"
  print "    Application Type: Client\n"
  print "    Default Access type: Read-only\n"
  consumer_key = HighLine.new.ask('Consumer Key: ')
  consumer_secret = HighLine.new.ask('Consumer Secret: ')
  consumer = OAuth::Consumer.new(
                                 consumer_key,
                                 consumer_secret,
                                 :site => "https://api.twitter.com"
                                 )
  request_token = consumer.get_request_token
  print "Please access and authorize the request from dumptter.\n"
  print "  #{request_token.authorize_url}\n"
  oauth_verifier = HighLine.new.ask('Please enter the PIN: ')
  access_token = request_token.get_access_token(:oauth_verifier => "#{oauth_verifier}")
  yaml_io = File.open("#{YAML_FILE}",'w')
  yaml_io.puts "consumer_key: #{consumer_key}"
  yaml_io.puts "consumer_secret: #{consumer_secret}"
  yaml_io.puts "token_key: #{access_token.token}"
  yaml_io.puts "token_secret: #{access_token.secret}"
  yaml_io.close
end
check_errors(errors)

invalid_yaml = false
File.open(YAML_FILE) do |io|
  YAML.load_documents(io) do |y|
    if defined? y['consumer_key']
      tmp_consumer_key=y['consumer_key']
      twitter_consumer_key=tmp_consumer_key
    else
      invalid_yaml = true
    end
    if defined? y['consumer_secret']
      tmp_consumer_secret=y['consumer_secret']
      twitter_consumer_secret=tmp_consumer_secret
    else
      invalid_yaml = true
    end
    if defined? y['token_key']
      tmp_token_key=y['token_key']
      twitter_token_key=tmp_token_key
    else
      invalid_yaml = true
    end
    if defined? y['token_secret']
      tmp_token_secret=y['token_secret']
      twitter_token_secret=tmp_token_secret
    else
      invalid_yaml = true
    end
  end
end
if invalid_yaml
  errors << "'#{YAML_FILE}' is invalid."
elsif twitter_consumer_key == '' ||
  twitter_consumer_secret == '' ||
    twitter_token_key == '' || 
    twitter_token_secret == ''
  errors << "'#{YAML_FILE}' is invalid."
end
check_errors(errors)

if FileTest.exist?(DB_FILE)
  if FileTest::file?(DB_FILE)
  else
    errors << "'#{DB_FILE}' is not a file."
  end
else
  InitialSchema.migrate(:up)
end

class Status < ActiveRecord::Base
  scope :newest, -> { order("status_at desc") }
end

consumer = OAuth::Consumer.new(
                               twitter_consumer_key,
                               twitter_consumer_secret,
                               :site => 'https://api.twitter.com'
                               )

token = OAuth::AccessToken.new(
                               consumer,
                               twitter_token_key,
                               twitter_token_secret
                               )

rubytter = OAuthRubytter.new(token)

latest_status = Status.newest.first
if latest_status.nil?
  mode = 'init'
  print "Collecting your all tweets (up to 3200, limited in API).\n"
else
  mode = 'update'
  print "Collecting your new tweets (up to 3200, limited in API).\n"
end
all_timeline = []
loop = true
page = 1
while loop == true do
  if mode == 'init'
    timeline = rubytter.user_timeline(:count => 200, :page => page)
  else
    timeline = rubytter.user_timeline(:count => 200, :since_id => latest_status.status_id, :page => page)
  end
  if timeline.size < 200
    loop = false
  end
  if page >= 16
    loop = false
  end
  all_timeline = all_timeline + timeline
  page = page + 1
end

statuses = []
all_timeline.reverse.each{|status|
  if status.in_reply_to_status_id == nil
    reply = FALSE
  else
    reply = TRUE
  end
  statuses.push(
                Status.new(
                           :status_id => status.id,
                           :status_text => status.text,
                           :user_id => status.user.id,
                           :user_screen_name => status.user.screen_name,
                           :status_reply => reply,
                           :status_at => Time.at(Time.parse(status.created_at).to_i)
                           )
                )
}

if statuses.size > 0
  Status.transaction {
    statuses.each{|new_status|
      new_status.save
    }
  }
end

